# *** Основы объектно-ориентированного программирования ***

#  Объект принадлежит определенному классу (типу) 
# Объекты обладают свойствами и методами (функции)

# Класс - это некий "чертеж" ("план") объектов.

# Объект определенного класса называется экземпляром класса.


# Создание (определение) класса
# Название классов принято писать с заглавной буквы
class Laika:
    def __init__(self):
        # метод-конструктор
        # здесь создаются свойства (атрибуты, поле)
        # None означает пустоту в питоне

        self.age = None

    def gav(self):
        # метод
        print(f"Гав-гав! Мой вес: {self.age}")

# создание экземпляров (объектов) класса Laika
tuzik = Laika()

# присовоение значения свойству
tuzik.age = 3 

# чтение значения из свойства
val = tuzik.age

# print(val)

# вызов метода
# tuzik.gav()

# еще один экземпляр Laika
sharik = Laika()

sharik.age = 10

# sharik.gav()


# *** Принцип наследования (автор Алан Кэй)***

# Классы могут наследовать свойства и методы у других классов

# Создание родительского (предкового) класса
class Cat:
    def __init__(self, n_legs):
        self.num_legs = n_legs

    def move(self):
        print(f"У меня ногов: {self.num_legs}")

# создание дочерних классов
class Cat_1(Cat):
    pass

class Cat_2(Cat):
    def info(self):
        print("Я вторая кошка")
murka = Cat_1(4)

murka.move()

cisa = Cat_2(3)

cisa.move()
cisa.info()

# самостоятельно:
# - полиморфизм
# - инкапсуляция
# - композиция
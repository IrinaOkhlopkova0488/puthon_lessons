# *** ФУНКЦИИ ***

# встроенная функция ввода данных
# data = input("Введите данные: ")

# print(f"Вы ввели вот это - {data}")

# СОЗДАНИЕ (ОПРЕДЕЛЕНИЕ) ФУНКЦИИ 

# 1 вариант. Функция, принимающая данные (обладающая аргументами)
# def func_1(arg_1):
#     s = arg_1 ** 2 
#     w = s + 20 
#     print(f"Результат: {w}")

# Вызов функции
# func_1(2)
def func_2(a, b, c):
    res = a + b + c
    res += 200
    print(res)
# func_2(1,2,3)

# аргумент может иметь значение по умолчанию
def func_3(arg_1, arg_2=100):
    res = arg_1 + arg_2
    print(res)
# func_3(25)

# 2 вариант. Функция, возвращаюшая данные
def func_4(arg_1, arg_2):
    res = arg_1 + arg_2
    return res 

# d = func_4(10,20)


def func_5(x, y):
    res_1 = x * y
    res_2 = x / y
    return res_1, res_2, x

# первый способ приема данных
d_1 = func_5(10, 2)
#  второй способ приема данных 
a, b, c = func_5(10, 2)

# print(d_1)
# print(d_1[0])

# print(a, b, c)


# ***БЕЗЫМЯННЫЕ ФУНКЦИИ (лямбда-выражения, лямбда-функции)***

# Особенности:
# - всегда обладают аргументами 
# - всегда возвращает результат

# Пример 1. Лямбда внутри генератора списка
# my_list = [(lambda arg_1: arg_1.upper())(i) for i in "hello"]

# Пример 2. Словарь из лямбда-выражения 
my_lambdas = {
    "*": lambda arg_1, arg_2: arg_1 * arg_2, 
    "+": lambda w, z: w + z
}

print(my_lambdas["+"](6, 5))
print(my_lambdas["*"](6, 5))
# *** Коллекции (контейнеры) ***

# ** Список (list)

# создание пустого списка
my_list = []
my_list = list()

# PEP8

# добавления объекта (элемента) в список
my_list.append(100)
my_list.append(3.24)
my_list.append("hello")
my_list.append([10, 20, 30])

# print(my_list)

# чтение значений элемента
el = my_list[2]

# обратная индексация
el = my_list[-1]

# замена значения элемента
my_list[0] = 500

# удаление элемента по значению
# my_list.remove(3.14)

# удаление элемента по индексу
del my_list[-1]

# срез списка
s = "Hello, World!"
my_list = list(s)

my_slice = my_list[2:]
my_slice = my_list[2:5]

# print(my_list)
# print(my_slice)
#  создание кортежа
my_tuple = (10, 20, 30, 40, 50)

# my_tuple[0] = 100


# print(my_tuple)

# #  чтение значения элементов 
# print(my_tuple[2])

# #  срез 
# print(my_tuple[3:])


# *** Словарь (dict) ***

# изменяемый, упорядоченный тип коллекции 

# пара "ключ-значение" 
# {ключ_1:значение_1, ключ_1:значение_2}

# создание словаря
my_dict = {10:3.14, "abc":[1,2,3]}

# print(my_dict)

#  чтение значений 
# print(my_dict[10])
# print(my_dict["abc"])

data0 = {"name":"Irina", "age":34, "id": 123.5}
data1 = {"name":"Altan", "age":11, "id": 12.5}
data2 = {"name":"Sayaana", "age":10, "id": 13.2}

total_data = {"p0":data0, "p1":data1, "p2":data2}

# print(total_data["p0"]["name"])

# изменение значений
my_dict["abc"] = "hello"
# print(my_dict)
# *** Множество (set)***

# Изменяемый тип коллекции

# Осебенности множества:
# - неупорядочный тип коллекций (объекты не индекируются)
# - автоматом удаляет дублирующие объекты 

# создание пустого множества 
my_set = set()

# создание наполненного множества
my_set = {10, 20, 30}

# добавление элемента
my_set.add(123)

# когда добавляется значение, которое уже есть во множестве, то оно удаляется (или не добавляется)

my_set.add(30)

# удаление элемента
my_set.remove(20)

# метод удаление без ошибок
my_set.discard(40)

# Дано два множества
w = {"a", "b", "c", "d"}
z = {'b', 'c', 'q'}

# объединение множеств 
# f = w.union(z) (1 способ) следующее 2 короткий способ 
f = w | z


# пересечение (повторяющиеся значения)
# f = w.intersection(z) (1 способ) следующее 2 короткий способ
f = w & z

# разность переменных 
f = w.difference(z)
f = z.difference(w)

# симметричная разность 
f = w.symmetric_difference(z)
# короткая запись difference
f = w - z 

# самостоятельно поэкспериментировать с оставшимися методами
# рассмотреть модуль collections 

# print(f)
# остаются только уникальные значения и объединяются в рандомном положении








 